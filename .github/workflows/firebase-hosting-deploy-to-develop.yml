name: Build and Deploy JL Designs to Dev Environment

on:
  push:
    branches:
      - 'feature/**'
      - 'develop'

jobs:
  build_and_deploy_dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm ci

      - name: Load .env.development file
        run: |
          echo "Loading .env.development file"
          set -a
          source .env.development
          set +a

      - name: Build the project
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_APP_ENV: development

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_DEV }}
          service_account_key: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JLDESIGNS_DEV }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Build Docker image
        run: |
          # Build environment arguments from .env file
          BUILD_ARGS=""
          while IFS= read -r line; do
            if [[ ! -z "$line" && ! "$line" =~ ^#.* ]]; then
              BUILD_ARGS="$BUILD_ARGS --build-arg $line"
            fi
          done < .env.development
          
          # Build the Docker image
          docker build \
            --build-arg NEXT_PUBLIC_APP_ENV=development \
            $BUILD_ARGS \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID_DEV }}/jldesigns-app-dev:dev \
            .

      - name: Configure Docker to use GCloud credentials
        run: |
          gcloud auth configure-docker gcr.io

      - name: Push Docker image to Container Registry
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID_DEV }}/jldesigns-app-dev:dev

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy jldesigns-app-dev \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID_DEV }}/jldesigns-app-dev:dev \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 4000 \
            --memory 8Gi \
            --cpu 4 \
            --min-instances 1 \
            --max-instances 2 \
            --concurrency 80 \
            --timeout 300s \
            --set-env-vars=HOST=dev.jldesigns.com \
            $(grep -v '^#' .env.development | sed 's/^/--set-env-vars=/')

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        id: auth
        with:
          credentials_json: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JLDESIGNS_DEV }}'
          create_credentials_file: true
          export_environment_variables: true

      - name: Set Firebase Configurations
        run: |
          firebase use ${{ secrets.FIREBASE_PROJECT_ID_DEV }}
          firebase functions:config:set artifactregistry.enabled=false
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          DOTENV_CONFIG_PATH: .env.development

      - name: Deploy to Firebase Hosting
        run: |
          firebase use ${{ secrets.FIREBASE_PROJECT_ID_DEV }}
          firebase deploy --only hosting:development --debug
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}
          DOTENV_CONFIG_PATH: .env.development